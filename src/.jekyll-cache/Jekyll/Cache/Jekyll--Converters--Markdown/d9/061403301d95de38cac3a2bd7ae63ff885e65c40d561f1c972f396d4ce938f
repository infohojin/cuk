I"Y/<h1 id="10-메모리-관리">10 메모리 관리</h1>

<h2 id="학습목표">학습목표</h2>

<ul>
  <li>
    <p>메모리를 관리하는 정책과 할당 방법을 설명할 수 있다.</p>
  </li>
  <li>
    <p>연속 메모리 할당 방식과 분산 메모리 할당 방식의 차이를 이해할 수 있다.</p>
  </li>
  <li>
    <p>분산 메모리 할당 방식인 페이징 방식과 세그먼테이션 방식을 설명할 수 있다.</p>
  </li>
</ul>

<h2 id="학습내용">학습내용</h2>

<ol>
  <li>메모리 관리의 개요</li>
  <li>연속 메모리 할당</li>
  <li>분산 메모리 할당: 페이지</li>
  <li>분산 메모리 할당 : 세그먼테이션</li>
</ol>

<h1 id="1-메모리-관리의-개요">1. 메모리 관리의 개요</h1>

<p><img src="./img/os10_10.png" alt="" /></p>

<h2 id="메모리의-개요">메모리의 개요</h2>

<h4 id="메모리의-용도">메모리의 용도</h4>

<ul>
  <li>CPU가 <strong>명령어나 데이터를 읽거나 저장</strong>할 수 있는 기억장치</li>
  <li>프로그램이 수행되려면 반드시 메모리에 적재 되어야 함 =&gt; 폰 노이만 방식</li>
  <li>메모리의 분류 : 레지스터, 캐시, 메인 메모리, 보조기억장치 =&gt; 속도, 용량, 가격의 차이</li>
</ul>

<h4 id="메모리-관리">메모리 관리</h4>

<ul>
  <li>
    <p>프로세스들에게 메모리를 <strong>할당</strong> 하거나 <strong>회수</strong>하는 동작 혹은 <strong>보호</strong> 하는 동작</p>
  </li>
  <li>
    <p>다중 프로그래밍 시스템에서는 여러 프로세스가 메모리에 동시에 적재되어 동작할 수 있도록 운영체제가 지원함</p>
  </li>
</ul>

<p>메모리란 프로세스들이 <strong>점유경쟁</strong>해야 하는 한정된 자원</p>

<p>메모리 관리 정책</p>

<ul>
  <li>적재정책 : 보조기억장치에서 메모리로 프로세스를 반입하는 시기를 결정하는 정책</li>
  <li>배치정책: 메모리로 반입한 프로세스를 메모리의 어느 위치에 적재할 것인지를 결정하는 정책</li>
  <li>대치정책: 메모리가 부족한 경우에 현재 동작 중인 프로세스들중에서 제거할 프로세스를 결정하여 교체하는 정책</li>
</ul>

<h2 id="메모리의-구조와-매핑">메모리의 구조와 매핑</h2>

<h4 id="주소-할당-address-binding이란">주소 할당 (Address Binding)이란?</h4>

<ul>
  <li>대부분의 시스템에서는 사용자 프로세스가 메모리의 어느 부분에도 적재가 될 수 있음</li>
  <li>연결 편집기(linkage editor)나 적재기(loader)에서 혹은 실행 시에 재배치 가능한 주소를 절대주소로 바꾸는 것을 주소할당 혹은 주소 바인딩이라고 함</li>
</ul>

<h4 id="3가지-주소할당-방식">3가지 주소할당 방식</h4>

<ol>
  <li>컴파일 시간 바인딩</li>
  <li>적재 시간 바인딩</li>
  <li>수행 시간 바인딩</li>
</ol>

<p>컴파일 시간 바인딩</p>

<ul>
  <li>코드와 데이터가 위치해야 하는 주소를 미리 알고 있는 경우 절대 주소를 갖는 코드를 생성</li>
  <li>코드와 데이터의 위치를 변경해야 하는 경우에는 다시 컴파일해야 함</li>
</ul>

<p>적재시간 바인딩</p>

<ul>
  <li>컴파일 단계에서 재배치 가능한 형태의 코드를 생성하고 프로그램을 메모리에 적재하는 시점에 절대주소가 결정됨</li>
</ul>

<p>수행시간 바인딩</p>

<p>코드와 데이터의 위치가 프로그램이 수행되는 중간에 결정됨</p>

<p>aaa</p>

<p><img src="./img/os10_18.png" alt="" /></p>

<p>aaa</p>

<h4 id="정적-링킹static-linking">정적 링킹(static linking)</h4>

<p>이진 코드로 이루어진 프로그램 내부에 라이브러리 코드가 결합하여 공존하는 방식</p>

<blockquote>
  <p>라이브러리 코드는여러 프로그램에서 공통적으로 호출하여 사용하는 루틴이나 함수를 보유하고 있음</p>
</blockquote>

<p>동일한 라이브러리 코드가 여러 프로그램 코드에서 반복되기 때문에 디스크 공간과 메모리 공간을 모두 낭비하는 방식</p>

<h4 id="동적-적재-dynamic-loading">동적 적재 (dynamic loading</h4>

<ul>
  <li>루틴을 호출하면 메모리에 해당 푸린이 적재되어 있는지를 확인하고, 만약 적재되어 있지 않다면 재비치 가능 연결 적재기(relocatable linking loader)에서 요청하는 루틴을 메모리에 적재</li>
  <li>자주 실생되지 않지만 거대한 크기의 코드에서는 메모리 사용량을 감소시킬 수 있으므로 유용함</li>
  <li>운영체제의 특별한 지원을 불필요함. 디스크공간과 메모리 공가을 절약할 수 있음</li>
</ul>

<h4 id="동적-링킹dynamic-linking과-공유-라이브러리">동적 링킹(dynamic linking)과 공유 라이브러리</h4>

<ul>
  <li>링킹이 수행시간에 이루어짐</li>
  <li>동적 라이브러리 루틴이 메모리에 있는지 점검하고 만약에 없는 경우 디스크에서 메모리로 적제하며, 메모리에 있는 경우 동적 링킹을 사용함. 하나의 라이브러리 루틴을 여러 프로세스들이 공유할 수 있음.</li>
  <li>여러 프로세스들이 동적 링킹된 하나의 라이브러리 주소 공간을 공유함(공유라이브러리) -&gt; 디스크 및 메모리 공간 절약, 운영체제의 지원이 필요함</li>
  <li></li>
</ul>

<h4 id="주소공간의-분류">주소공간의 분류</h4>

<ul>
  <li>논리주소(logical address) 혹은 가상 주소(virtual address)</li>
  <li>
    <ul>
      <li>프로세스마다 존재하는 가상의 논리 메모리 주소</li>
      <li>각 프로세스 이비장에서는 마치 단일 프로세스 환경처럼 느낌</li>
    </ul>
  </li>
  <li>믈리주소(physical address)</li>
  <li>
    <ul>
      <li>실제 메모리 하드웨어 접근할대에 사용되는 물리적인 주소</li>
    </ul>
  </li>
</ul>

<p>컴파일 시간 바인딩과 적재 시간 바인딩에서는 논리주소와 물리주소가 동일함</p>

<h4 id="수행시간-바인딩에서는">수행시간 바인딩에서는</h4>

<ul>
  <li>논리 주소와 물리 주소는 다르며 수해시간에 바로 변환 작업이 수행됨 -&gt; 빠르게 변환하기 위해서 mmu라는 하드웨어의 도움을 받음</li>
  <li>컴파일러에서는 논리 주소를 사용한 코드를 사용함</li>
  <li>프로세스는 물리 주소에 대해서 알 수 없음</li>
</ul>

<p>aaa</p>

<p><img src="./img/os10_24.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_25.png" alt="" /></p>

<p>aaa</p>

<h1 id="2-연속-메모리-할당">2. 연속 메모리 할당</h1>

<p><img src="./img/os10_26.png" alt="" /></p>

<p>aaa</p>

<h2 id="메모리-할당-방법">메모리 할당 방법</h2>

<p><img src="./img/os10_27.png" alt="" /></p>

<p>aaa</p>

<h2 id="단일-프로그래밍-환경에서의-메모리-할당">단일 프로그래밍 환경에서의 메모리 할당</h2>

<p><img src="./img/os10_28.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_29.png" alt="" /></p>

<p>aaa</p>

<h2 id="다중-프로그래밍-환경에서의-메모리-할당">다중 프로그래밍 환경에서의 메모리 할당</h2>

<p><img src="./img/os10_30.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_31.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_32.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_33.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_34.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_35.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_36.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_37.png" alt="" /></p>

<p>aaa</p>

<h1 id="3-분산-메모리-할당-페이징">3. 분산 메모리 할당: 페이징</h1>

<p><img src="./img/os10_38.png" alt="" /></p>

<p>aaa</p>

<h2 id="페이징의-개념">페이징의 개념</h2>

<p><img src="./img/os10_39.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_40.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_41.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_42.png" alt="" /></p>

<p>aaa</p>

<h2 id="페이징-시스템의-하드웨어-구조와-원리">페이징 시스템의 하드웨어 구조와 원리</h2>

<p><img src="./img/os10_43.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_44.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_45.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_46.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_47.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_48.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_49.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_50.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_51.png" alt="" /></p>

<p>aaa</p>

<h2 id="페이지-테이블의-구현">페이지 테이블의 구현</h2>

<p><img src="./img/os10_52.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_53.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_54.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_55.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_56.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_57.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_58.png" alt="" /></p>

<p>aaa</p>

<h2 id="공유-페이지">공유 페이지</h2>

<p><img src="./img/os10_59.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_60.png" alt="" /></p>

<p>aaa</p>

<h2 id="다중-단계-페이징-시스템">다중 단계 페이징 시스템</h2>

<p><img src="./img/os10_61.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_62.png" alt="" /></p>

<p>aaa</p>

<h1 id="4분산-메모리-할당-세그먼테이션">4.분산 메모리 할당: 세그먼테이션</h1>

<p><img src="./img/os10_63.png" alt="" /></p>

<p>aaa</p>

<h2 id="세그먼테이션의-개념">세그먼테이션의 개념</h2>

<p><img src="./img/os10_64.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_65.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_66.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_67.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_68.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_69.png" alt="" /></p>

<p>aaa</p>

<h2 id="페이지화된-세그먼테이션">페이지화된 세그먼테이션</h2>

<p><img src="./img/os10_70.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_71.png" alt="" /></p>

<p>aaa</p>

<p><img src="./img/os10_72.png" alt="" /></p>

<p>aaa</p>

<h2 id="확인하기">확인하기</h2>

<p><img src="./img/os10_73.png" alt="" /></p>

<p>aaa</p>

<h2 id="정리하기">정리하기</h2>

<ol>
  <li>다중 프로그래밍 시스템에서 프로게스간의 메모리 관리(할당, 배치, 대치)정책을 사용하여 한정된 메모리 장치를 효율적으로 이용한다.</li>
  <li>프로세스는 가상의 논리주소 기반으로 동작하지만 실제로는 논리 주소값과는 다른 물리 주소로 변환되어 동작한다.</li>
  <li>메모리에 프로세스를 적재할 때는 크게 2가지 방법이 가능하다. 연속 혹은 분산9비연속)메모리 할당</li>
  <li>연속 메모리 할당 정책은 <strong>고정분할</strong> 할당 방시과 <strong>가변분할</strong> 할당 방식으로 구분할 수 있다.</li>
  <li>메모리를 할당하면서 사요하지 못하는 공간이 발생하며 형태적으로 내부 단편화와 외부 단편화 현상이 발생한다.</li>
  <li>페이징 방식과 세그먼테이션 방식은 프로세스에게 분산 메모리 공간을 할당하며 매핑 테이블을 이용하여 실사간으로 물리주소로 변환한다.</li>
  <li>페이징 방식은 고정된 크기의 페이지와 프레임을 프로세스에게 할당하고 페이지 테이블을 사용하여 물리주소로 변환한다.</li>
  <li>세그먼테이션 방식은 세그먼트라는 가변의 영역들을 프로세스에게 할당하고 세그먼트 테이블을 사용하여 무릴주소로 변환한다.</li>
</ol>

:ET